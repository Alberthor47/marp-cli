version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.2.4
  codecov: codecov/codecov@3.2.4

executors:
  node:
    parameters:
      browser:
        type: boolean
        default: false
      version:
        type: string
        default: '20.17.0' # Specify LTS major and minor for development
    docker:
      - image: cimg/node:<< parameters.version >><<# parameters.browser >>-browsers<</ parameters.browser >>
    working_directory: ~/marp-cli

  docker:
    machine:
      image: ubuntu-2204:2023.04.2
      docker_layer_caching: true
    working_directory: ~/marp-cli
    environment:
      DOCKER_BUILDKIT: 1

commands:
  install:
    parameters:
      force:
        type: boolean
        default: false
      postinstall:
        type: steps
        default: []
      yarn:
        type: string
        default: '^1.22.22'
    steps:
      - run:
          name: Upgrade yarn for current user
          command: cd ~ && yarn policies set-version << parameters.yarn >>

      - restore_cache:
          keys:
            - v2.4-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}-{{ .Branch }}
            - v2.4-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}-
            - v2.4-dependencies-{{ .Environment.CIRCLE_JOB }}-

      - run: yarn install --frozen-lockfile <<# parameters.force >>--ignore-engines<</ parameters.force >>
      - steps: << parameters.postinstall >>

      - save_cache:
          key: v2.4-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "yarn.lock" }}-{{ .Branch }}
          paths:
            - ~/.cache/yarn

  audit:
    steps:
      - checkout
      - install:
          postinstall:
            - run: yarn -s check:audit

  test:
    parameters:
      browser:
        type: boolean
        default: false
      force:
        type: boolean
        default: false
    steps:
      - run: node --version

      - checkout
      - install:
          force: << parameters.force >>

      - when:
          condition: << parameters.browser >>
          steps:
            - browser-tools/install-chrome

      - run:
          name: Prettier formatting
          command: yarn check:format

      - run:
          name: TypeScript type checking
          command: yarn check:ts

      - run:
          name: ESLint
          command: yarn lint:js

      - run:
          name: stylelint
          command: yarn lint:css

      - run:
          name: Jest
          command: yarn test:coverage --ci -i --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: tmp/test-results

      - codecov/upload:
          flags: linux

      - store_test_results:
          path: tmp/test-results

      - store_artifacts:
          path: ./coverage
          destination: coverage

  build:
    steps:
      - checkout
      - install

      - run: yarn build

      - persist_to_workspace:
          root: ~/marp-cli
          paths:
            - lib

  docker:
    parameters:
      tag:
        type: string
        default: latest
      user:
        type: env_var_name
        default: DOCKER_USER
      pass:
        type: env_var_name
        default: DOCKER_PASS
      machine:
        type: boolean
        default: false
    steps:
      - checkout

      - attach_workspace:
          at: ~/marp-cli

      - unless:
          condition: << parameters.machine >>
          steps:
            - setup_remote_docker:
                version: '20.10.2'

      - run:
          name: Login to Docker Hub
          command: docker login -u ${<< parameters.user >>} -p ${<< parameters.pass >>}

      - run:
          name: Install Docker buildx
          command: |
            docker build --platform=local --quiet -o ~ "https://github.com/docker/buildx.git#v0.8.1"
            mkdir -p ~/.docker/cli-plugins
            mv ~/buildx ~/.docker/cli-plugins/docker-buildx
          environment:
            DOCKER_BUILDKIT: 1

      - run:
          name: Setup QEMU
          command: docker run --privileged --rm tonistiigi/binfmt --install all

      - run:
          name: Build Docker image and push to Docker Hub
          command: |
            docker context create builder
            docker buildx create --use builder
            docker buildx build --no-cache --platform linux/amd64,linux/arm64 --progress plain --push -t marpteam/marp-cli:<< parameters.tag >> .
          environment:
            DOCKER_CLI_EXPERIMENTAL: enabled

jobs:
  audit:
    executor: node
    steps:
      - audit

  # Testing
  test-node16:
    executor:
      name: node
      browser: true
      version: '16.20'
    steps:
      - test:
          force: true
          browser: true

  test-node18:
    executor:
      name: node
      browser: true
      version: '18.20'
    steps:
      - test:
          force: true
          browser: true

  test-node20:
    executor:
      name: node
      browser: true
    steps:
      - test:
          browser: true

  test-node22:
    executor:
      name: node
      browser: true
      version: '22.8'
    steps:
      - test:
          browser: true

  # Docker
  docker-build-latest:
    executor: node
    steps:
      - build

  docker-image-latest:
    executor: docker
    steps:
      - docker:
          tag: latest
          machine: true

  docker-build-tag:
    executor: node
    steps:
      - build

  docker-image-tag:
    executor: docker
    steps:
      - docker:
          tag: $CIRCLE_TAG
          machine: true

workflows:
  test:
    jobs:
      # Test
      - audit
      - test-node16:
          requires:
            - audit
      - test-node18:
          requires:
            - audit
      - test-node20:
          requires:
            - audit
      - test-node22:
          requires:
            - audit

      # Docker (latest)
      - docker-build-latest:
          requires:
            - test-node16
            - test-node18
            - test-node20
            - test-node22
          filters:
            branches:
              only: main

      - docker-image-latest:
          requires:
            - docker-build-latest

      # Docker (tag)
      - docker-build-tag:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      - docker-image-tag:
          requires:
            - docker-build-tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
